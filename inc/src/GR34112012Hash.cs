using System;
using System.IO;
using System.Linq;
//Êëàññ ðåàëèçóþùèé ôóíêöèþ õåøèðîâàíèÿ
namespace GR3411_2012
{
    public class GR3411_2012_Hash
    {
        // Ìàòðèöà A äëÿ L ôóíêöèè
        private readonly ulong[] A = {
            0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
            0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
            0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
            0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
            0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
            0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
            0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
            0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
            0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
            0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
            0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
            0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
            0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
            0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
            0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
            0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
        };

        // Ïîäñòàíîâêà áàéò
        private readonly byte[] Sbox ={
            0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
            0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
            0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
            0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
            0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
            0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
            0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
            0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
            0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
            0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
            0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
            0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
            0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
            0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
            0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
            0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
        };

        // Èòåðàöèîííûå êîíñòàíòû
        private readonly byte[][] C = {
        new byte[64]{
            0x07,0x45,0xa6,0xf2,0x59,0x65,0x80,0xdd,0x23,0x4d,0x74,0xcc,0x36,0x74,0x76,0x05,
            0x15,0xd3,0x60,0xa4,0x08,0x2a,0x42,0xa2,0x01,0x69,0x67,0x92,0x91,0xe0,0x7c,0x4b,
            0xfc,0xc4,0x85,0x75,0x8d,0xb8,0x4e,0x71,0x16,0xd0,0x45,0x2e,0x43,0x76,0x6a,0x2f,
            0x1f,0x7c,0x65,0xc0,0x81,0x2f,0xcb,0xeb,0xe9,0xda,0xca,0x1e,0xda,0x5b,0x08,0xb1
        },
        new byte[64]{
            0xb7,0x9b,0xb1,0x21,0x70,0x04,0x79,0xe6,0x56,0xcd,0xcb,0xd7,0x1b,0xa2,0xdd,0x55,
            0xca,0xa7,0x0a,0xdb,0xc2,0x61,0xb5,0x5c,0x58,0x99,0xd6,0x12,0x6b,0x17,0xb5,0x9a,
            0x31,0x01,0xb5,0x16,0x0f,0x5e,0xd5,0x61,0x98,0x2b,0x23,0x0a,0x72,0xea,0xfe,0xf3,
            0xd7,0xb5,0x70,0x0f,0x46,0x9d,0xe3,0x4f,0x1a,0x2f,0x9d,0xa9,0x8a,0xb5,0xa3,0x6f
        },
        new byte[64]{
            0xb2,0x0a,0xba,0x0a,0xf5,0x96,0x1e,0x99,0x31,0xdb,0x7a,0x86,0x43,0xf4,0xb6,0xc2,
            0x09,0xdb,0x62,0x60,0x37,0x3a,0xc9,0xc1,0xb1,0x9e,0x35,0x90,0xe4,0x0f,0xe2,0xd3,
            0x7b,0x7b,0x29,0xb1,0x14,0x75,0xea,0xf2,0x8b,0x1f,0x9c,0x52,0x5f,0x5e,0xf1,0x06,
            0x35,0x84,0x3d,0x6a,0x28,0xfc,0x39,0x0a,0xc7,0x2f,0xce,0x2b,0xac,0xdc,0x74,0xf5
        },
        new byte[64]{
            0x2e,0xd1,0xe3,0x84,0xbc,0xbe,0x0c,0x22,0xf1,0x37,0xe8,0x93,0xa1,0xea,0x53,0x34,
            0xbe,0x03,0x52,0x93,0x33,0x13,0xb7,0xd8,0x75,0xd6,0x03,0xed,0x82,0x2c,0xd7,0xa9,
            0x3f,0x35,0x5e,0x68,0xad,0x1c,0x72,0x9d,0x7d,0x3c,0x5c,0x33,0x7e,0x85,0x8e,0x48,
            0xdd,0xe4,0x71,0x5d,0xa0,0xe1,0x48,0xf9,0xd2,0x66,0x15,0xe8,0xb3,0xdf,0x1f,0xef
        },
        new byte[64]{
            0x57,0xfe,0x6c,0x7c,0xfd,0x58,0x17,0x60,0xf5,0x63,0xea,0xa9,0x7e,0xa2,0x56,0x7a,
            0x16,0x1a,0x27,0x23,0xb7,0x00,0xff,0xdf,0xa3,0xf5,0x3a,0x25,0x47,0x17,0xcd,0xbf,
            0xbd,0xff,0x0f,0x80,0xd7,0x35,0x9e,0x35,0x4a,0x10,0x86,0x16,0x1f,0x1c,0x15,0x7f,
            0x63,0x23,0xa9,0x6c,0x0c,0x41,0x3f,0x9a,0x99,0x47,0x47,0xad,0xac,0x6b,0xea,0x4b
        },
        new byte[64]{
            0x6e,0x7d,0x64,0x46,0x7a,0x40,0x68,0xfa,0x35,0x4f,0x90,0x36,0x72,0xc5,0x71,0xbf,
            0xb6,0xc6,0xbe,0xc2,0x66,0x1f,0xf2,0x0a,0xb4,0xb7,0x9a,0x1c,0xb7,0xa6,0xfa,0xcf,
            0xc6,0x8e,0xf0,0x9a,0xb4,0x9a,0x7f,0x18,0x6c,0xa4,0x42,0x51,0xf9,0xc4,0x66,0x2d,
            0xc0,0x39,0x30,0x7a,0x3b,0xc3,0xa4,0x6f,0xd9,0xd3,0x3a,0x1d,0xae,0xae,0x4f,0xae
        },
        new byte[64]{
            0x93,0xd4,0x14,0x3a,0x4d,0x56,0x86,0x88,0xf3,0x4a,0x3c,0xa2,0x4c,0x45,0x17,0x35,
            0x04,0x05,0x4a,0x28,0x83,0x69,0x47,0x06,0x37,0x2c,0x82,0x2d,0xc5,0xab,0x92,0x09,
            0xc9,0x93,0x7a,0x19,0x33,0x3e,0x47,0xd3,0xc9,0x87,0xbf,0xe6,0xc7,0xc6,0x9e,0x39,
            0x54,0x09,0x24,0xbf,0xfe,0x86,0xac,0x51,0xec,0xc5,0xaa,0xee,0x16,0x0e,0xc7,0xf4
        },
        new byte[64]{
            0x1e,0xe7,0x02,0xbf,0xd4,0x0d,0x7f,0xa4,0xd9,0xa8,0x51,0x59,0x35,0xc2,0xac,0x36,
            0x2f,0xc4,0xa5,0xd1,0x2b,0x8d,0xd1,0x69,0x90,0x06,0x9b,0x92,0xcb,0x2b,0x89,0xf4,
            0x9a,0xc4,0xdb,0x4d,0x3b,0x44,0xb4,0x89,0x1e,0xde,0x36,0x9c,0x71,0xf8,0xb7,0x4e,
            0x41,0x41,0x6e,0x0c,0x02,0xaa,0xe7,0x03,0xa7,0xc9,0x93,0x4d,0x42,0x5b,0x1f,0x9b
        },
        new byte[64]{
            0xdb,0x5a,0x23,0x83,0x51,0x44,0x61,0x72,0x60,0x2a,0x1f,0xcb,0x92,0xdc,0x38,0x0e,
            0x54,0x9c,0x07,0xa6,0x9a,0x8a,0x2b,0x7b,0xb1,0xce,0xb2,0xdb,0x0b,0x44,0x0a,0x80,
            0x84,0x09,0x0d,0xe0,0xb7,0x55,0xd9,0x3c,0x24,0x42,0x89,0x25,0x1b,0x3a,0x7d,0x3a,
            0xde,0x5f,0x16,0xec,0xd8,0x9a,0x4c,0x94,0x9b,0x22,0x31,0x16,0x54,0x5a,0x8f,0x37
        },
        new byte[64]{
            0xed,0x9c,0x45,0x98,0xfb,0xc7,0xb4,0x74,0xc3,0xb6,0x3b,0x15,0xd1,0xfa,0x98,0x36,
            0xf4,0x52,0x76,0x3b,0x30,0x6c,0x1e,0x7a,0x4b,0x33,0x69,0xaf,0x02,0x67,0xe7,0x9f,
            0x03,0x61,0x33,0x1b,0x8a,0xe1,0xff,0x1f,0xdb,0x78,0x8a,0xff,0x1c,0xe7,0x41,0x89,
            0xf3,0xf3,0xe4,0xb2,0x48,0xe5,0x2a,0x38,0x52,0x6f,0x05,0x80,0xa6,0xde,0xbe,0xab
        },
        new byte[64]{
            0x1b,0x2d,0xf3,0x81,0xcd,0xa4,0xca,0x6b,0x5d,0xd8,0x6f,0xc0,0x4a,0x59,0xa2,0xde,
            0x98,0x6e,0x47,0x7d,0x1d,0xcd,0xba,0xef,0xca,0xb9,0x48,0xea,0xef,0x71,0x1d,0x8a,
            0x79,0x66,0x84,0x14,0x21,0x80,0x01,0x20,0x61,0x07,0xab,0xeb,0xbb,0x6b,0xfa,0xd8,
            0x94,0xfe,0x5a,0x63,0xcd,0xc6,0x02,0x30,0xfb,0x89,0xc8,0xef,0xd0,0x9e,0xcd,0x7b
        },
        new byte[64]{
            0x20,0xd7,0x1b,0xf1,0x4a,0x92,0xbc,0x48,0x99,0x1b,0xb2,0xd9,0xd5,0x17,0xf4,0xfa,
            0x52,0x28,0xe1,0x88,0xaa,0xa4,0x1d,0xe7,0x86,0xcc,0x91,0x18,0x9d,0xef,0x80,0x5d,
            0x9b,0x9f,0x21,0x30,0xd4,0x12,0x20,0xf8,0x77,0x1d,0xdf,0xbc,0x32,0x3c,0xa4,0xcd,
            0x7a,0xb1,0x49,0x04,0xb0,0x80,0x13,0xd2,0xba,0x31,0x16,0xf1,0x67,0xe7,0x8e,0x37
        }
        };
        //Ìàñêà áèò äëÿ ðàçáèåíèÿ íà áàéòû
        private readonly byte[] bitMask = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };
        //Äåëåãàò îáðàáîò÷èêà ñîáûòèÿ ïðîãðåññà âû÷èñëåíèÿ (äëÿ îáðàòíîé ñâÿçè)
        public delegate void sendProgressDel(long progress);
        //Ñîáûòèå îòðàæàþùåå óâåëè÷åíèå ïðîãðåññà âû÷èñëåíèÿ íà 1ìÁèò (äëÿ îáðàòíîé ñâÿçè)
        public event sendProgressDel Hash1MBitStep;
        //Ïðîãðåññ âû÷èñëåíèÿ (äëÿ îáðàòíîé ñâÿçè)
        public long progress { get; private set; }
        //Âñïîìîãàòåëüíûå ïåðåìåííûå
        private byte[] N = new byte[64];
        private byte[] Sigma = new byte[64];
        private byte[] lResultG = new byte[64];
        private byte[] lResultK1 = new byte[64];
        private byte[] lResultK2 = new byte[64];
        private byte[] lResultE1 = new byte[64];
        private byte[] lResultE2 = new byte[64];
        private byte[] t = new byte[64];
        private byte[] newh = new byte[64];
        private byte[] state = new byte[64];
        //Ìàòðèöà ïðåäïðîñ÷åòà
        private ulong[,] LSPrecalc = new ulong[256, 8];
        //Äëèíà õåøà
        public int outLen;
        //Êîíñòðóêòîð ñ ïàðåìåòðîì äëèíû
        public GR3411_2012_Hash(int outputLenght)
        {
            if (outputLenght != 256 && outputLenght != 512)
                throw new Exception("Óêàçàííûé ðàçìåð âûâîäà íå ïîääåðæèâàåòñÿ");
            outLen = outputLenght;
            Precalc();
        }
        //Ïðåäïðîñ÷åò
        private void Precalc()
        {
            for (int temp = 0; temp < 256; temp++)//ïåðåáîð áàéò
            {
                for (int j = 0; j < 8; j++)
                {
                    byte temp1 = Sbox[(byte)temp];
                    ulong t1 = 0;
                    for (int k = 0; k < 8; k++)
                    {
                        if ((temp1 & bitMask[k]) != 0)
                        {
                            t1 ^= A[(7  j) * 8 + k];
                        }
                    }
                    LSPrecalc[temp, j] = t1;
                }
            }
        }
        //Ñëîæåíèå ïî ìîäóëþ 2^512
        private void AddModulo512(byte[] a, byte[] b, byte[] c)
        {
            int i = 0, t = 0;
            for (i = 0; i < 64; i++)
            {
                t = a[i] + b[i] + (t >> 8);
                c[i] = (byte)(t & 0xFF);
            }
        }
        //Ïîáèòîâîå ñëîæåíèå ïî ìîäóëþ 2 (X)
        private void AddXor512(byte[] a, byte[] b, byte[] c)
        {
            for (int i = 0; i < 64; i++)
                c[i] = (byte)(a[i] ^ b[i]);
        }
        //Îñóùåñòâëÿåò ïðåîáðàçîâàíèå LPSX. X ïðèìåíÿåòñÿ ê stateA è stateB
        private void LPSX(byte[] stateA, byte[] stateB, byte[] result)
        {
            ulong t;
            int i1;
            for (int i = 0; i < 8; i++)//ïåðåáîð âîñüìåðîê áàéò
            {
                //Ïðåîáðàçîâàíèå P îñóùåñòâëÿåòñÿ ñìåùåíèåì èíäåêñà
                t = LSPrecalc[stateA[i] ^ stateB[i], 0] ^
                    LSPrecalc[stateA[i + 8] ^ stateB[i + 8], 1] ^
                    LSPrecalc[stateA[i + 16] ^ stateB[i + 16], 2] ^
                    LSPrecalc[stateA[i + 24] ^ stateB[i + 24], 3] ^
                    LSPrecalc[stateA[i + 32] ^ stateB[i + 32], 4] ^
                    LSPrecalc[stateA[i + 40] ^ stateB[i + 40], 5] ^
                    LSPrecalc[stateA[i + 48] ^ stateB[i + 48], 6] ^
                    LSPrecalc[stateA[i + 56] ^ stateB[i + 56], 7];
                i1 = i * 8;
                //Ðàçáèåíèå ðåçóëüòàòà íà áëîêè ïî 8 áèò
                result[i1] = (byte)t;
                result[i1 + 1] = (byte)(t >> 8);
                result[i1 + 2] = (byte)(t >> 16);
                result[i1 + 3] = (byte)(t >> 24);
                result[i1 + 4] = (byte)(t >> 32);
                result[i1 + 5] = (byte)(t >> 40);
                result[i1 + 6] = (byte)(t >> 48);
                result[i1 + 7] = (byte)(t >> 56);
            }
        }
        //Çàìåíà êëþ÷à
        private byte[] KeySchedule(byte[] K, int i)
        {
            //Ïðîâåðêà íà çàïèñü â ñåáÿ
            if (K.Equals(lResultK1))
            {
                LPSX(K, C[i], lResultK2);
                return lResultK2;
            }
            else
            {
                LPSX(K, C[i], lResultK1);
                return lResultK1;
            }
        }
        //E ïðåîáðàçîâàíèå
        private byte[] E(byte[] K, byte[] m)
        {
            Array.Copy(m, state, 64);
            for (int i = 0; i < 12; i++)
            {
                //Ïðîâåðêà íà çàïèñü â ñåáÿ
                if (state.Equals(lResultE1))
                {
                    LPSX(state, K, lResultE2);
                    state = lResultE2;
                }
                else
                {
                    LPSX(state, K, lResultE1);
                    state = lResultE1;
                }
                K = KeySchedule(K, i);
            }
            AddXor512(state, K, state);
            return state;
        }
        //Ôóíêöèÿ ñæàòèÿ
        private byte[] G_n(byte[] N, byte[] h, byte[] m)
        {
            LPSX(h, N, lResultG);
            t = E(lResultG, m);
            AddXor512(t, h, t);
            AddXor512(t, m, newh);
            return newh;
        }
        //Õåøôóíêöèÿ îò ìàññèâà áàéò
        public byte[] GetHash(byte[] message)
        {
            //Ýòàï 1
            byte[] paddedMes = new byte[64];
            byte[] h = new byte[64];
            byte[] N_0 = new byte[64];
            N = new byte[64];
            Sigma = new byte[64];
            if (outLen == 256)
            {
                for (int i = 0; i < 64; i++)
                {
                    h[i] = 0x01;
                }
            }
            byte[] N_512 = new byte[64];
            Array.Copy(BitConverter.GetBytes(512), 0, N_512, 0, 4);
            int inc = 0;
            byte[] tempMes = new byte[64];
            int progress = 0;
            //Ýòàï 2
            int len = message.Length * 8;
            while (len >= 512)
            {
                Array.Copy(message, inc * 64, tempMes, 0, 64);
                h = G_n(N, h, tempMes);
                AddModulo512(N, N_512, N);
                AddModulo512(Sigma, tempMes, Sigma);
                len = 512;
                inc++;
                progress++;
                if (progress % 2048 == 0 && Hash1MBitStep != null)
                    Hash1MBitStep(progress);
            }
            //Ýòàï 3
            byte[] message1 = new byte[message.Length  inc * 64];
            Array.Copy(message, inc * 64, message1, 0, message.Length  inc * 64);
            if (message1.Length < 64)
            {
                for (int i = message1.Length + 1; i < 64; i++)
                {
                    paddedMes[i] = 0;
                }
                paddedMes[message1.Length] = 0x01;
                Array.Copy(message1, 0, paddedMes, 0, message1.Length);
            }
            h = G_n(N, h, paddedMes);
            byte[] MesLen = new byte[64];
            Array.Copy(BitConverter.GetBytes(message1.Length * 8), 0, MesLen, 0, 4);
            AddModulo512(N, MesLen.ToArray(), N);
            AddModulo512(Sigma, paddedMes, Sigma);
            h = G_n(N_0, h, N);
            h = G_n(N_0, h, Sigma);

            if (outLen == 512)
            {
                return h;
            }
            else
            {
                byte[] h256 = new byte[32];
                Array.Copy(h, 32, h256, 0, 32);
                return h256;
            }
        }
        //Ïîòî÷íàÿ ðåàëèçàöèÿ õåøôóíêöèè
        public byte[] GetHash(Stream st)
        {
            //Ýòàï 1
            byte[] paddedMes = new byte[64];
            int len = 0;
            byte[] h = new byte[64];
            byte[] N_0 = new byte[64];
            N = new byte[64];
            Sigma = new byte[64];
            if (outLen == 256)
            {
                for (int i = 0; i < 64; i++)
                {
                    h[i] = 0x01;
                }
            }
            byte[] N_512 = new byte[64];
            Array.Copy(BitConverter.GetBytes(512), 0, N_512, 0, 4);
            byte[] tempMes = new byte[64];
            int blockLen = st.Read(tempMes, 0, 64);
            int progress = 0;
            //Ýòàï 2
            while (blockLen == 64)
            {
                h = G_n(N, h, tempMes);
                AddModulo512(N, N_512, N);
                AddModulo512(Sigma, tempMes, Sigma);
                len += 512;
                blockLen = st.Read(tempMes, 0, 64);
                progress++;
                if (progress % 2048 == 0 && Hash1MBitStep != null)
                    Hash1MBitStep(progress);
            }
            //Ýòàï 3
            byte[] message1 = new byte[blockLen];
            Array.Copy(tempMes, 0, message1, 0, blockLen);
            if (message1.Length < 64)
            {
                for (int i = message1.Length + 1; i < 64; i++)
                {
                    paddedMes[i] = 0;
                }
                paddedMes[message1.Length] = 0x01;
                Array.Copy(message1, 0, paddedMes, 0, message1.Length);
            }
            h = G_n(N, h, paddedMes);
            byte[] MesLen = new byte[64];
            Array.Copy(BitConverter.GetBytes(message1.Length * 8), 0, MesLen, 0, 4);
            AddModulo512(N, MesLen.ToArray(), N);
            AddModulo512(Sigma, paddedMes, Sigma);
            h = G_n(N_0, h, N);
            h = G_n(N_0, h, Sigma);

            if (outLen == 512)
            {
                return h;
            }
            else
            {
                byte[] h256 = new byte[32];
                Array.Copy(h, 32, h256, 0, 32);
                return h256;
            }
        }
    }
}